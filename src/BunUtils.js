// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let FastGlob = require("fast-glob");

let isDev = process.env.NODE_ENV !== "production";

async function loadStaticFiles(root) {
  return await FastGlob.glob(isDev ? [
      "public/**/*",
      "assets/**/*"
    ] : ["dist/**/*"], {
    dot: true,
    cwd: root !== undefined ? root : process.cwd()
  });
}

let staticFiles = {
  contents: undefined
};

async function serveStaticFile(request) {
  let s = staticFiles.contents;
  let staticFiles$1;
  if (s !== undefined) {
    staticFiles$1 = s;
  } else {
    let files = await loadStaticFiles(undefined);
    let files$1 = new Map(files.map(f => [
      isDev ? (
          f.startsWith("public/") ? f.slice(7) : f
        ) : (
          f.startsWith("dist/") ? f.slice(5) : f
        ),
      f
    ]));
    staticFiles.contents = files$1;
    staticFiles$1 = files$1;
  }
  let url = new URL(request.url);
  let pathname = url.pathname;
  let path = pathname.split("/").filter(p => p !== "");
  let joined = path.join("/");
  let fileLoc = staticFiles$1.get(joined);
  if (fileLoc === undefined) {
    return;
  }
  let bunFile = Bun.file("./" + fileLoc);
  let match = bunFile.size;
  return match !== 0 ? new Response(bunFile) : new Response("", {
      status: 404
    });
}

function runDevServer(port) {
  Bun.serve({
    development: true,
    port: port + 1 | 0,
    fetch: async (request, server) => {
      if (server.upgrade(request)) {
        return undefined;
      } else {
        return new Response("", {
          status: 404
        });
      }
    },
    websocket: {
      open: _v => {}
    }
  });
}

function copy(search) {
  return new URLSearchParams(Object.fromEntries(search.entries()));
}

let URLSearchParams$1 = {
  copy: copy
};

exports.serveStaticFile = serveStaticFile;
exports.runDevServer = runDevServer;
exports.isDev = isDev;
exports.URLSearchParams = URLSearchParams$1;
/* isDev Not a pure module */
