// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let $$Bun = require("bun");

let tokenInputName = "resx_csrf_token";

function getTokenFromHeaders(headers) {
  let v = headers.get("x-csrf-token");
  if (!(v == null)) {
    return v;
  }
}

async function getTokenFromRequest(request) {
  let v = getTokenFromHeaders(request.headers);
  if (v !== undefined) {
    return v;
  }
  let ct = request.headers.get("Content-Type");
  if (ct == null) {
    return;
  }
  if (!(ct.includes("application/x-www-form-urlencoded") || ct.includes("multipart/form-data"))) {
    return;
  }
  let fd = await request.formData();
  let v$1 = fd.get(tokenInputName);
  if (typeof v$1 !== "string") {
    return;
  } else {
    return v$1;
  }
}

function getSecret() {
  return Bun.env["RESX_CSRF_SECRET"];
}

function generateToken() {
  let secret = Bun.env["RESX_CSRF_SECRET"];
  if (secret !== undefined) {
    return $$Bun.CSRF.generate(secret);
  } else {
    return $$Bun.CSRF.generate();
  }
}

async function verifyRequest(request) {
  let token = await getTokenFromRequest(request);
  if (token === undefined) {
    return false;
  }
  let secret = Bun.env["RESX_CSRF_SECRET"];
  if (secret !== undefined) {
    return $$Bun.CSRF.verify(token, {
      secret: secret
    });
  } else {
    return $$Bun.CSRF.verify(token);
  }
}

exports.tokenInputName = tokenInputName;
exports.getTokenFromHeaders = getTokenFromHeaders;
exports.getTokenFromRequest = getTokenFromRequest;
exports.getSecret = getSecret;
exports.generateToken = generateToken;
exports.verifyRequest = verifyRequest;
/* bun Not a pure module */
