// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let $$Bun = require("bun");
let Buntest = require("bun:test");
let Hjsx$ResX = require("../src/Hjsx.js");
let Handlers$ResX = require("../src/Handlers.js");
let Stdlib_Option = require("@rescript/runtime/lib/js/Stdlib_Option.js");
let CSRFToken$ResX = require("../src/CSRFToken.js");
let TestUtils$ResX = require("./TestUtils.js");
let Primitive_option = require("@rescript/runtime/lib/js/Primitive_option.js");
let SecurityPolicy$ResX = require("../src/SecurityPolicy.js");

Buntest.describe("CSRF", () => {
  Buntest.test("Token component renders hidden input with token", async () => {
    let text = await TestUtils$ResX.getContentInBody(param => Hjsx$ResX.jsx(TestUtils$ResX.Html.make, {
      children: Hjsx$ResX.Elements.jsx("form", {
        children: Hjsx$ResX.jsx(CSRFToken$ResX.make, {})
      })
    }));
    let token = Stdlib_Option.getOr(Stdlib_Option.getOrThrow(Primitive_option.fromNullable(/name="resx_csrf_token" type="hidden" value="(.+)"/.exec(text)), undefined)[1], "");
    Buntest.expect(text).toBe(`<!DOCTYPE html><html><head></head><body><form><input name="resx_csrf_token" type="hidden" value="` + token + `"/></form></body></html>`);
  });
  Buntest.test("hxPost blocks without token when csrfCheck is true", async () => {
    Handlers$ResX.hxPost(TestUtils$ResX.Handler.testHandler, "/csrf-hx-post", SecurityPolicy$ResX.allow, async param => "ok", true);
    let response = await TestUtils$ResX.getResponseWithInit("/_api/csrf-hx-post", {
      method: "POST"
    });
    let text = await response.text();
    Buntest.expect(response.status).toBe(403);
    Buntest.expect(text).toBe(`<!DOCTYPE html>Invalid CSRF token.`);
  });
  Buntest.test("hxPost passes with valid token when csrfCheck is true", async () => {
    Handlers$ResX.hxPost(TestUtils$ResX.Handler.testHandler, "/csrf-hx-post-valid", SecurityPolicy$ResX.allow, async param => "ok", true);
    let token = $$Bun.CSRF.generate();
    let headers = [[
        "X-CSRF-Token",
        token
      ]];
    let response = await TestUtils$ResX.getResponseWithInit("/_api/csrf-hx-post-valid", {
      headers: headers,
      method: "POST"
    });
    let text = await response.text();
    Buntest.expect(response.status).toBe(200);
    Buntest.expect(text).toBe(`<!DOCTYPE html>ok`);
  });
  Buntest.test("formAction blocks without token when csrfCheck is true", async () => {
    Handlers$ResX.formAction(TestUtils$ResX.Handler.testHandler, "/csrf-form", SecurityPolicy$ResX.allow, async param => new Response("ok"), true);
    let headers = [[
        "Content-Type",
        "application/x-www-form-urlencoded"
      ]];
    let response = await TestUtils$ResX.getResponseWithInit("/_form/csrf-form", {
      headers: headers,
      method: "POST"
    });
    let text = await response.text();
    Buntest.expect(response.status).toBe(403);
    Buntest.expect(text).toBe("Invalid CSRF token.");
  });
  Buntest.test("formAction passes with valid token when csrfCheck is true", async () => {
    Handlers$ResX.formAction(TestUtils$ResX.Handler.testHandler, "/csrf-form-valid", SecurityPolicy$ResX.allow, async param => new Response("ok"), true);
    let token = $$Bun.CSRF.generate();
    let headers = [[
        "X-CSRF-Token",
        token
      ]];
    let response = await TestUtils$ResX.getResponseWithInit("/_form/csrf-form-valid", {
      headers: headers,
      method: "POST"
    });
    let text = await response.text();
    Buntest.expect(response.status).toBe(200);
    Buntest.expect(text).toBe("ok");
  });
  Buntest.test("defaultCsrfCheck enforces CSRF when enabled on handler make", async () => {
    let customHandler = Handlers$ResX.make(async param => ({
      shouldAppendToHead: false
    }), {
      defaultCsrfCheck: {
        TAG: "ForAllMethods",
        _0: true
      }
    });
    Handlers$ResX.hxPost(customHandler, "/csrf-default", SecurityPolicy$ResX.allow, async param => "ok", undefined);
    let match = TestUtils$ResX.getPort();
    let port = match[0];
    let server = Bun.serve({
      development: true,
      port: port,
      fetch: async (request, _server) => await Handlers$ResX.handleRequest(customHandler, {
        request: request,
        render: async param => null,
        setupHeaders: () => new Headers([[
            "Content-Type",
            "text/html"
          ]])
      })
    });
    let res1 = await fetch(`http://localhost:` + port.toString() + `/_api/csrf-default`, {
      method: "POST"
    });
    Buntest.expect(res1.status).toBe(403);
    let token = $$Bun.CSRF.generate();
    let headers = [[
        "X-CSRF-Token",
        token
      ]];
    let res2 = await fetch(`http://localhost:` + port.toString() + `/_api/csrf-default`, {
      headers: headers,
      method: "POST"
    });
    let text2 = await res2.text();
    Buntest.expect(res2.status).toBe(200);
    Buntest.expect(text2).toBe(`<!DOCTYPE html>ok`);
    server.stop(true);
    return match[1]();
  });
  Buntest.test("per-method default: POST enforced, GET relaxed", async () => {
    let customHandler = Handlers$ResX.make(async param => ({
      shouldAppendToHead: false
    }), {
      defaultCsrfCheck: {
        TAG: "PerMethod",
        get: false,
        post: true,
        put: undefined,
        patch: undefined,
        delete: undefined
      }
    });
    Handlers$ResX.hxGet(customHandler, "/pm", SecurityPolicy$ResX.allow, async param => "ok", undefined);
    Handlers$ResX.hxPost(customHandler, "/pm", SecurityPolicy$ResX.allow, async param => "ok", undefined);
    let match = TestUtils$ResX.getPort();
    let port = match[0];
    let server = Bun.serve({
      development: true,
      port: port,
      fetch: async (request, _server) => await Handlers$ResX.handleRequest(customHandler, {
        request: request,
        render: async param => null,
        setupHeaders: () => new Headers([[
            "Content-Type",
            "text/html"
          ]])
      })
    });
    let resGet = await fetch(`http://localhost:` + port.toString() + `/_api/pm`);
    let textGet = await resGet.text();
    Buntest.expect(resGet.status).toBe(200);
    Buntest.expect(textGet).toBe(`<!DOCTYPE html>ok`);
    let resPostNo = await fetch(`http://localhost:` + port.toString() + `/_api/pm`, {
      method: "POST"
    });
    Buntest.expect(resPostNo.status).toBe(403);
    let token = $$Bun.CSRF.generate();
    let headers = [[
        "X-CSRF-Token",
        token
      ]];
    let resPostYes = await fetch(`http://localhost:` + port.toString() + `/_api/pm`, {
      headers: headers,
      method: "POST"
    });
    let textPostYes = await resPostYes.text();
    Buntest.expect(resPostYes.status).toBe(200);
    Buntest.expect(textPostYes).toBe(`<!DOCTYPE html>ok`);
    server.stop(true);
    return match[1]();
  });
});

/*  Not a pure module */
