// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Buntest = require("bun:test");
let Handlers$ResX = require("../src/Handlers.js");
let TestUtils$ResX = require("./TestUtils.js");
let SecurityPolicy$ResX = require("../src/SecurityPolicy.js");

Buntest.describe("HTMX handlers", () => {
  Buntest.test("prefixing of HTMX handler routes work", async () => {
    Handlers$ResX.hxGet(TestUtils$ResX.Handler.testHandler, "/test", SecurityPolicy$ResX.allow, async param => "Test!");
    let response = await TestUtils$ResX.getResponse(undefined, undefined, undefined, undefined, undefined, "/_api/test");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Test!`);
  });
  Buntest.test("security policy can block content", async () => {
    Handlers$ResX.hxGet(TestUtils$ResX.Handler.testHandler, "/test-block", async param => ({
      TAG: "Block",
      code: 403,
      message: "Forbidden"
    }), async param => "Test!");
    let response = await TestUtils$ResX.getResponse(undefined, undefined, undefined, undefined, undefined, "/_api/test-block");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Forbidden`);
    Buntest.expect(response.status).toBe(403);
  });
  Buntest.test("delaying GET handler implementation works", async () => {
    let getHandler = Handlers$ResX.hxGetRef(TestUtils$ResX.Handler.testHandler, "/test-delay");
    Handlers$ResX.hxGetDefine(TestUtils$ResX.Handler.testHandler, getHandler, SecurityPolicy$ResX.allow, async param => "Test!");
    let response = await TestUtils$ResX.getResponse(undefined, undefined, undefined, undefined, undefined, "/_api/test-delay");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Test!`);
  });
  Buntest.test("delaying POST handler implementation works", async () => {
    let postHandler = Handlers$ResX.hxPostRef(TestUtils$ResX.Handler.testHandler, "/test-delay");
    Handlers$ResX.hxPostDefine(TestUtils$ResX.Handler.testHandler, postHandler, SecurityPolicy$ResX.allow, async param => "Test!");
    let response = await TestUtils$ResX.getResponse("POST", undefined, undefined, undefined, undefined, "/_api/test-delay");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Test!`);
  });
  Buntest.test("delaying PUT handler implementation works", async () => {
    let putHandler = Handlers$ResX.hxPutRef(TestUtils$ResX.Handler.testHandler, "/test-delay");
    Handlers$ResX.hxPutDefine(TestUtils$ResX.Handler.testHandler, putHandler, SecurityPolicy$ResX.allow, async param => "Test!");
    let response = await TestUtils$ResX.getResponse("PUT", undefined, undefined, undefined, undefined, "/_api/test-delay");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Test!`);
  });
  Buntest.test("delaying DELETE handler implementation works", async () => {
    let deleteHandler = Handlers$ResX.hxDeleteRef(TestUtils$ResX.Handler.testHandler, "/test-delay");
    Handlers$ResX.hxDeleteDefine(TestUtils$ResX.Handler.testHandler, deleteHandler, SecurityPolicy$ResX.allow, async param => "Test!");
    let response = await TestUtils$ResX.getResponse("DELETE", undefined, undefined, undefined, undefined, "/_api/test-delay");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Test!`);
  });
  Buntest.test("delaying PATCH handler implementation works", async () => {
    let patchHandler = Handlers$ResX.hxPatchRef(TestUtils$ResX.Handler.testHandler, "/test-delay");
    Handlers$ResX.hxPatchDefine(TestUtils$ResX.Handler.testHandler, patchHandler, SecurityPolicy$ResX.allow, async param => "Test!");
    let response = await TestUtils$ResX.getResponse("PATCH", undefined, undefined, undefined, undefined, "/_api/test-delay");
    let text = await response.text();
    Buntest.expect(text).toBe(`<!DOCTYPE html>Test!`);
  });
  Buntest.test("endpoint URL helpers return the correct URLs", async () => {
    let getHandler = Handlers$ResX.hxGet(TestUtils$ResX.Handler.testHandler, "/test-url-get", SecurityPolicy$ResX.allow, async param => "Test!");
    let postHandler = Handlers$ResX.hxPost(TestUtils$ResX.Handler.testHandler, "/test-url-post", SecurityPolicy$ResX.allow, async param => "Test!");
    let putHandler = Handlers$ResX.hxPut(TestUtils$ResX.Handler.testHandler, "/test-url-put", SecurityPolicy$ResX.allow, async param => "Test!");
    let deleteHandler = Handlers$ResX.hxDelete(TestUtils$ResX.Handler.testHandler, "/test-url-delete", SecurityPolicy$ResX.allow, async param => "Test!");
    let patchHandler = Handlers$ResX.hxPatch(TestUtils$ResX.Handler.testHandler, "/test-url-patch", SecurityPolicy$ResX.allow, async param => "Test!");
    let formActionHandler = Handlers$ResX.formAction(TestUtils$ResX.Handler.testHandler, "/test-form", SecurityPolicy$ResX.allow, async param => Response.redirect("/test"));
    Buntest.expect(Handlers$ResX.hxGetToEndpointURL(getHandler)).toBe("/_api/test-url-get");
    Buntest.expect(Handlers$ResX.hxPostToEndpointURL(postHandler)).toBe("/_api/test-url-post");
    Buntest.expect(Handlers$ResX.hxPutToEndpointURL(putHandler)).toBe("/_api/test-url-put");
    Buntest.expect(Handlers$ResX.hxDeleteToEndpointURL(deleteHandler)).toBe("/_api/test-url-delete");
    Buntest.expect(Handlers$ResX.hxPatchToEndpointURL(patchHandler)).toBe("/_api/test-url-patch");
    Buntest.expect(Handlers$ResX.FormAction.toEndpointURL(formActionHandler)).toBe("/_form/test-form");
  });
});

/*  Not a pure module */
