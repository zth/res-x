// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Html = require("./Html.js");
var SiteMap = require("./SiteMap.js");
var Hjsx$ResX = require("rescript-x/src/Hjsx.js");
var FourOhFour = require("./FourOhFour.js");
var $$Navigation = require("./Navigation.js");
var UserRoutes = require("./UserRoutes.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var HtmxHandler = require("./HtmxHandler.js");
var BunUtils$ResX = require("rescript-x/src/BunUtils.js");
var Handlers$ResX = require("rescript-x/src/Handlers.js");
var RequestController$ResX = require("rescript-x/src/RequestController.js");

var server = Bun.serve({
      development: BunUtils$ResX.isDev,
      port: 4444,
      fetch: (async function (request, _server) {
          var staticResponse = await BunUtils$ResX.serveStaticFile(request);
          if (staticResponse !== undefined) {
            return Caml_option.valFromOption(staticResponse);
          } else {
            return await Handlers$ResX.handleRequest(HtmxHandler.handler, {
                        request: request,
                        render: (async function (param) {
                            var requestController = param.requestController;
                            var path = param.path;
                            var headers = param.headers;
                            var exit = 0;
                            if (path && path.hd === "sitemap.xml") {
                              if (!path.tl) {
                                return Hjsx$ResX.jsx(SiteMap.make, {});
                              }
                              exit = 1;
                            } else {
                              exit = 1;
                            }
                            if (exit === 1) {
                              RequestController$ResX.appendTitleSegment(requestController, "Test App");
                              var tmp;
                              var exit$1 = 0;
                              if (path) {
                                var exit$2 = 0;
                                switch (path.hd) {
                                  case "moved" :
                                      tmp = path.tl ? Hjsx$ResX.jsx(FourOhFour.make, {
                                              setGenericTitle: true
                                            }) : RequestController$ResX.redirect(requestController, "/start", 302);
                                      break;
                                  case "" :
                                  case "start" :
                                      exit$2 = 3;
                                      break;
                                  case "user" :
                                      tmp = UserRoutes.match(path.tl, headers, requestController);
                                      break;
                                  default:
                                    tmp = Hjsx$ResX.jsx(FourOhFour.make, {
                                          setGenericTitle: true
                                        });
                                }
                                if (exit$2 === 3) {
                                  if (path.tl) {
                                    tmp = Hjsx$ResX.jsx(FourOhFour.make, {
                                          setGenericTitle: true
                                        });
                                  } else {
                                    exit$1 = 2;
                                  }
                                }
                                
                              } else {
                                exit$1 = 2;
                              }
                              if (exit$1 === 2) {
                                headers.set("Cache-Control", "public, immutable, max-age=900");
                                tmp = Hjsx$ResX.Elements.jsx("div", {
                                      children: "Start page!"
                                    });
                              }
                              return Hjsx$ResX.jsxs(Html.make, {
                                          children: [
                                            Hjsx$ResX.jsx($$Navigation.make, {}),
                                            Hjsx$ResX.Elements.jsx("div", {
                                                  children: tmp
                                                })
                                          ]
                                        });
                            }
                            
                          }),
                        setupHeaders: (function () {
                            return new Headers([[
                                          "Content-Type",
                                          "text/html"
                                        ]]);
                          })
                      });
          }
        })
    });

var portString = server.port.toString();

console.log("Listening! on localhost:" + portString);

if (BunUtils$ResX.isDev) {
  BunUtils$ResX.runDevServer(4444);
}

var port = 4444;

exports.port = port;
exports.server = server;
exports.portString = portString;
/* server Not a pure module */
